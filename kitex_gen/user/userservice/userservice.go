// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userservice

import (
	user "TTMS/kitex_gen/user"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateUser": kitex.NewMethodInfo(
		createUserHandler,
		newCreateUserArgs,
		newCreateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserLogin": kitex.NewMethodInfo(
		userLoginHandler,
		newUserLoginArgs,
		newUserLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAllUser": kitex.NewMethodInfo(
		getAllUserHandler,
		newGetAllUserArgs,
		newGetAllUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ChangeUserPassword": kitex.NewMethodInfo(
		changeUserPasswordHandler,
		newChangeUserPasswordArgs,
		newChangeUserPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteUser": kitex.NewMethodInfo(
		deleteUserHandler,
		newDeleteUserArgs,
		newDeleteUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BindEmail": kitex.NewMethodInfo(
		bindEmailHandler,
		newBindEmailArgs,
		newBindEmailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ForgetPassword": kitex.NewMethodInfo(
		forgetPasswordHandler,
		newForgetPasswordArgs,
		newForgetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateUserArgs:
		success, err := handler.(user.UserService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *user.CreateUserRequest
}

func (p *CreateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *user.CreateUserRequest

func (p *CreateUserArgs) GetReq() *user.CreateUserRequest {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateUserResult struct {
	Success *user.CreateUserResponse
}

var CreateUserResult_Success_DEFAULT *user.CreateUserResponse

func (p *CreateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.CreateUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(user.CreateUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *user.CreateUserResponse {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CreateUserResponse)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateUserResult) GetResult() interface{} {
	return p.Success
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserLoginArgs:
		success, err := handler.(user.UserService).UserLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserLoginArgs() interface{} {
	return &UserLoginArgs{}
}

func newUserLoginResult() interface{} {
	return &UserLoginResult{}
}

type UserLoginArgs struct {
	Req *user.UserLoginRequest
}

func (p *UserLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserLoginArgs) Unmarshal(in []byte) error {
	msg := new(user.UserLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserLoginArgs_Req_DEFAULT *user.UserLoginRequest

func (p *UserLoginArgs) GetReq() *user.UserLoginRequest {
	if !p.IsSetReq() {
		return UserLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserLoginResult struct {
	Success *user.UserLoginResponse
}

var UserLoginResult_Success_DEFAULT *user.UserLoginResponse

func (p *UserLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserLoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserLoginResult) Unmarshal(in []byte) error {
	msg := new(user.UserLoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserLoginResult) GetSuccess() *user.UserLoginResponse {
	if !p.IsSetSuccess() {
		return UserLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserLoginResponse)
}

func (p *UserLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserLoginResult) GetResult() interface{} {
	return p.Success
}

func getAllUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetAllUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetAllUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAllUserArgs:
		success, err := handler.(user.UserService).GetAllUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAllUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAllUserArgs() interface{} {
	return &GetAllUserArgs{}
}

func newGetAllUserResult() interface{} {
	return &GetAllUserResult{}
}

type GetAllUserArgs struct {
	Req *user.GetAllUserRequest
}

func (p *GetAllUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetAllUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAllUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAllUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAllUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAllUserArgs) Unmarshal(in []byte) error {
	msg := new(user.GetAllUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAllUserArgs_Req_DEFAULT *user.GetAllUserRequest

func (p *GetAllUserArgs) GetReq() *user.GetAllUserRequest {
	if !p.IsSetReq() {
		return GetAllUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAllUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAllUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAllUserResult struct {
	Success *user.GetAllUserResponse
}

var GetAllUserResult_Success_DEFAULT *user.GetAllUserResponse

func (p *GetAllUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetAllUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAllUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAllUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAllUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAllUserResult) Unmarshal(in []byte) error {
	msg := new(user.GetAllUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAllUserResult) GetSuccess() *user.GetAllUserResponse {
	if !p.IsSetSuccess() {
		return GetAllUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAllUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetAllUserResponse)
}

func (p *GetAllUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllUserResult) GetResult() interface{} {
	return p.Success
}

func changeUserPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ChangeUserPasswordRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ChangeUserPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ChangeUserPasswordArgs:
		success, err := handler.(user.UserService).ChangeUserPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChangeUserPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newChangeUserPasswordArgs() interface{} {
	return &ChangeUserPasswordArgs{}
}

func newChangeUserPasswordResult() interface{} {
	return &ChangeUserPasswordResult{}
}

type ChangeUserPasswordArgs struct {
	Req *user.ChangeUserPasswordRequest
}

func (p *ChangeUserPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ChangeUserPasswordRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChangeUserPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChangeUserPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChangeUserPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ChangeUserPasswordArgs) Unmarshal(in []byte) error {
	msg := new(user.ChangeUserPasswordRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChangeUserPasswordArgs_Req_DEFAULT *user.ChangeUserPasswordRequest

func (p *ChangeUserPasswordArgs) GetReq() *user.ChangeUserPasswordRequest {
	if !p.IsSetReq() {
		return ChangeUserPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChangeUserPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChangeUserPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ChangeUserPasswordResult struct {
	Success *user.ChangeUserPasswordResponse
}

var ChangeUserPasswordResult_Success_DEFAULT *user.ChangeUserPasswordResponse

func (p *ChangeUserPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ChangeUserPasswordResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChangeUserPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChangeUserPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChangeUserPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ChangeUserPasswordResult) Unmarshal(in []byte) error {
	msg := new(user.ChangeUserPasswordResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChangeUserPasswordResult) GetSuccess() *user.ChangeUserPasswordResponse {
	if !p.IsSetSuccess() {
		return ChangeUserPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChangeUserPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ChangeUserPasswordResponse)
}

func (p *ChangeUserPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChangeUserPasswordResult) GetResult() interface{} {
	return p.Success
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DeleteUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteUserArgs:
		success, err := handler.(user.UserService).DeleteUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteUserArgs() interface{} {
	return &DeleteUserArgs{}
}

func newDeleteUserResult() interface{} {
	return &DeleteUserResult{}
}

type DeleteUserArgs struct {
	Req *user.DeleteUserRequest
}

func (p *DeleteUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteUserArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteUserArgs_Req_DEFAULT *user.DeleteUserRequest

func (p *DeleteUserArgs) GetReq() *user.DeleteUserRequest {
	if !p.IsSetReq() {
		return DeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteUserResult struct {
	Success *user.DeleteUserResponse
}

var DeleteUserResult_Success_DEFAULT *user.DeleteUserResponse

func (p *DeleteUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.DeleteUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteUserResult) Unmarshal(in []byte) error {
	msg := new(user.DeleteUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteUserResult) GetSuccess() *user.DeleteUserResponse {
	if !p.IsSetSuccess() {
		return DeleteUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.DeleteUserResponse)
}

func (p *DeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteUserResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(user.UserService).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *user.GetUserInfoRequest
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetUserInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *user.GetUserInfoRequest

func (p *GetUserInfoArgs) GetReq() *user.GetUserInfoRequest {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *user.GetUserInfoResponse
}

var GetUserInfoResult_Success_DEFAULT *user.GetUserInfoResponse

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetUserInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *user.GetUserInfoResponse {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserInfoResponse)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func bindEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.BindEmailRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).BindEmail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BindEmailArgs:
		success, err := handler.(user.UserService).BindEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BindEmailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBindEmailArgs() interface{} {
	return &BindEmailArgs{}
}

func newBindEmailResult() interface{} {
	return &BindEmailResult{}
}

type BindEmailArgs struct {
	Req *user.BindEmailRequest
}

func (p *BindEmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.BindEmailRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BindEmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BindEmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BindEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BindEmailArgs) Unmarshal(in []byte) error {
	msg := new(user.BindEmailRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BindEmailArgs_Req_DEFAULT *user.BindEmailRequest

func (p *BindEmailArgs) GetReq() *user.BindEmailRequest {
	if !p.IsSetReq() {
		return BindEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BindEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BindEmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BindEmailResult struct {
	Success *user.BindEmailResponse
}

var BindEmailResult_Success_DEFAULT *user.BindEmailResponse

func (p *BindEmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.BindEmailResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BindEmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BindEmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BindEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BindEmailResult) Unmarshal(in []byte) error {
	msg := new(user.BindEmailResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BindEmailResult) GetSuccess() *user.BindEmailResponse {
	if !p.IsSetSuccess() {
		return BindEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BindEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.BindEmailResponse)
}

func (p *BindEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BindEmailResult) GetResult() interface{} {
	return p.Success
}

func forgetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ForgetPasswordRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ForgetPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ForgetPasswordArgs:
		success, err := handler.(user.UserService).ForgetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ForgetPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newForgetPasswordArgs() interface{} {
	return &ForgetPasswordArgs{}
}

func newForgetPasswordResult() interface{} {
	return &ForgetPasswordResult{}
}

type ForgetPasswordArgs struct {
	Req *user.ForgetPasswordRequest
}

func (p *ForgetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ForgetPasswordRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ForgetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ForgetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ForgetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ForgetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(user.ForgetPasswordRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ForgetPasswordArgs_Req_DEFAULT *user.ForgetPasswordRequest

func (p *ForgetPasswordArgs) GetReq() *user.ForgetPasswordRequest {
	if !p.IsSetReq() {
		return ForgetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ForgetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ForgetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ForgetPasswordResult struct {
	Success *user.ForgetPasswordResponse
}

var ForgetPasswordResult_Success_DEFAULT *user.ForgetPasswordResponse

func (p *ForgetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ForgetPasswordResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ForgetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ForgetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ForgetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ForgetPasswordResult) Unmarshal(in []byte) error {
	msg := new(user.ForgetPasswordResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ForgetPasswordResult) GetSuccess() *user.ForgetPasswordResponse {
	if !p.IsSetSuccess() {
		return ForgetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ForgetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ForgetPasswordResponse)
}

func (p *ForgetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ForgetPasswordResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, Req *user.CreateUserRequest) (r *user.CreateUserResponse, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, Req *user.UserLoginRequest) (r *user.UserLoginResponse, err error) {
	var _args UserLoginArgs
	_args.Req = Req
	var _result UserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllUser(ctx context.Context, Req *user.GetAllUserRequest) (r *user.GetAllUserResponse, err error) {
	var _args GetAllUserArgs
	_args.Req = Req
	var _result GetAllUserResult
	if err = p.c.Call(ctx, "GetAllUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeUserPassword(ctx context.Context, Req *user.ChangeUserPasswordRequest) (r *user.ChangeUserPasswordResponse, err error) {
	var _args ChangeUserPasswordArgs
	_args.Req = Req
	var _result ChangeUserPasswordResult
	if err = p.c.Call(ctx, "ChangeUserPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, Req *user.DeleteUserRequest) (r *user.DeleteUserResponse, err error) {
	var _args DeleteUserArgs
	_args.Req = Req
	var _result DeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *user.GetUserInfoRequest) (r *user.GetUserInfoResponse, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BindEmail(ctx context.Context, Req *user.BindEmailRequest) (r *user.BindEmailResponse, err error) {
	var _args BindEmailArgs
	_args.Req = Req
	var _result BindEmailResult
	if err = p.c.Call(ctx, "BindEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ForgetPassword(ctx context.Context, Req *user.ForgetPasswordRequest) (r *user.ForgetPasswordResponse, err error) {
	var _args ForgetPasswordArgs
	_args.Req = Req
	var _result ForgetPasswordResult
	if err = p.c.Call(ctx, "ForgetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
