// Code generated by Kitex v0.9.1. DO NOT EDIT.

package ticketservice

import (
	ticket "TTMS/kitex_gen/ticket"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BatchAddTicket": kitex.NewMethodInfo(
		batchAddTicketHandler,
		newBatchAddTicketArgs,
		newBatchAddTicketResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateTicket": kitex.NewMethodInfo(
		updateTicketHandler,
		newUpdateTicketArgs,
		newUpdateTicketResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAllTicket": kitex.NewMethodInfo(
		getAllTicketHandler,
		newGetAllTicketArgs,
		newGetAllTicketResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BuyTicket": kitex.NewMethodInfo(
		buyTicketHandler,
		newBuyTicketArgs,
		newBuyTicketResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ReturnTicket": kitex.NewMethodInfo(
		returnTicketHandler,
		newReturnTicketArgs,
		newReturnTicketResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	ticketServiceServiceInfo                = NewServiceInfo()
	ticketServiceServiceInfoForClient       = NewServiceInfoForClient()
	ticketServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return ticketServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return ticketServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return ticketServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TicketService"
	handlerType := (*ticket.TicketService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "ticket",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func batchAddTicketHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(ticket.BatchAddTicketRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(ticket.TicketService).BatchAddTicket(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BatchAddTicketArgs:
		success, err := handler.(ticket.TicketService).BatchAddTicket(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BatchAddTicketResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBatchAddTicketArgs() interface{} {
	return &BatchAddTicketArgs{}
}

func newBatchAddTicketResult() interface{} {
	return &BatchAddTicketResult{}
}

type BatchAddTicketArgs struct {
	Req *ticket.BatchAddTicketRequest
}

func (p *BatchAddTicketArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ticket.BatchAddTicketRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BatchAddTicketArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BatchAddTicketArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BatchAddTicketArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BatchAddTicketArgs) Unmarshal(in []byte) error {
	msg := new(ticket.BatchAddTicketRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BatchAddTicketArgs_Req_DEFAULT *ticket.BatchAddTicketRequest

func (p *BatchAddTicketArgs) GetReq() *ticket.BatchAddTicketRequest {
	if !p.IsSetReq() {
		return BatchAddTicketArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BatchAddTicketArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BatchAddTicketArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BatchAddTicketResult struct {
	Success *ticket.BatchAddTicketResponse
}

var BatchAddTicketResult_Success_DEFAULT *ticket.BatchAddTicketResponse

func (p *BatchAddTicketResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ticket.BatchAddTicketResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BatchAddTicketResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BatchAddTicketResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BatchAddTicketResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BatchAddTicketResult) Unmarshal(in []byte) error {
	msg := new(ticket.BatchAddTicketResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BatchAddTicketResult) GetSuccess() *ticket.BatchAddTicketResponse {
	if !p.IsSetSuccess() {
		return BatchAddTicketResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BatchAddTicketResult) SetSuccess(x interface{}) {
	p.Success = x.(*ticket.BatchAddTicketResponse)
}

func (p *BatchAddTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BatchAddTicketResult) GetResult() interface{} {
	return p.Success
}

func updateTicketHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(ticket.UpdateTicketRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(ticket.TicketService).UpdateTicket(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateTicketArgs:
		success, err := handler.(ticket.TicketService).UpdateTicket(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateTicketResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateTicketArgs() interface{} {
	return &UpdateTicketArgs{}
}

func newUpdateTicketResult() interface{} {
	return &UpdateTicketResult{}
}

type UpdateTicketArgs struct {
	Req *ticket.UpdateTicketRequest
}

func (p *UpdateTicketArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ticket.UpdateTicketRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateTicketArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateTicketArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateTicketArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateTicketArgs) Unmarshal(in []byte) error {
	msg := new(ticket.UpdateTicketRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateTicketArgs_Req_DEFAULT *ticket.UpdateTicketRequest

func (p *UpdateTicketArgs) GetReq() *ticket.UpdateTicketRequest {
	if !p.IsSetReq() {
		return UpdateTicketArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateTicketArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateTicketArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateTicketResult struct {
	Success *ticket.UpdateTicketResponse
}

var UpdateTicketResult_Success_DEFAULT *ticket.UpdateTicketResponse

func (p *UpdateTicketResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ticket.UpdateTicketResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateTicketResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateTicketResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateTicketResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateTicketResult) Unmarshal(in []byte) error {
	msg := new(ticket.UpdateTicketResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateTicketResult) GetSuccess() *ticket.UpdateTicketResponse {
	if !p.IsSetSuccess() {
		return UpdateTicketResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateTicketResult) SetSuccess(x interface{}) {
	p.Success = x.(*ticket.UpdateTicketResponse)
}

func (p *UpdateTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateTicketResult) GetResult() interface{} {
	return p.Success
}

func getAllTicketHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(ticket.GetAllTicketRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(ticket.TicketService).GetAllTicket(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAllTicketArgs:
		success, err := handler.(ticket.TicketService).GetAllTicket(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAllTicketResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAllTicketArgs() interface{} {
	return &GetAllTicketArgs{}
}

func newGetAllTicketResult() interface{} {
	return &GetAllTicketResult{}
}

type GetAllTicketArgs struct {
	Req *ticket.GetAllTicketRequest
}

func (p *GetAllTicketArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ticket.GetAllTicketRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAllTicketArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAllTicketArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAllTicketArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAllTicketArgs) Unmarshal(in []byte) error {
	msg := new(ticket.GetAllTicketRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAllTicketArgs_Req_DEFAULT *ticket.GetAllTicketRequest

func (p *GetAllTicketArgs) GetReq() *ticket.GetAllTicketRequest {
	if !p.IsSetReq() {
		return GetAllTicketArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAllTicketArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAllTicketArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAllTicketResult struct {
	Success *ticket.GetAllTicketResponse
}

var GetAllTicketResult_Success_DEFAULT *ticket.GetAllTicketResponse

func (p *GetAllTicketResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ticket.GetAllTicketResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAllTicketResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAllTicketResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAllTicketResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAllTicketResult) Unmarshal(in []byte) error {
	msg := new(ticket.GetAllTicketResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAllTicketResult) GetSuccess() *ticket.GetAllTicketResponse {
	if !p.IsSetSuccess() {
		return GetAllTicketResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAllTicketResult) SetSuccess(x interface{}) {
	p.Success = x.(*ticket.GetAllTicketResponse)
}

func (p *GetAllTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllTicketResult) GetResult() interface{} {
	return p.Success
}

func buyTicketHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(ticket.BuyTicketRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(ticket.TicketService).BuyTicket(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BuyTicketArgs:
		success, err := handler.(ticket.TicketService).BuyTicket(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BuyTicketResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBuyTicketArgs() interface{} {
	return &BuyTicketArgs{}
}

func newBuyTicketResult() interface{} {
	return &BuyTicketResult{}
}

type BuyTicketArgs struct {
	Req *ticket.BuyTicketRequest
}

func (p *BuyTicketArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ticket.BuyTicketRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BuyTicketArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BuyTicketArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BuyTicketArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BuyTicketArgs) Unmarshal(in []byte) error {
	msg := new(ticket.BuyTicketRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BuyTicketArgs_Req_DEFAULT *ticket.BuyTicketRequest

func (p *BuyTicketArgs) GetReq() *ticket.BuyTicketRequest {
	if !p.IsSetReq() {
		return BuyTicketArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BuyTicketArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BuyTicketArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BuyTicketResult struct {
	Success *ticket.BuyTicketResponse
}

var BuyTicketResult_Success_DEFAULT *ticket.BuyTicketResponse

func (p *BuyTicketResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ticket.BuyTicketResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BuyTicketResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BuyTicketResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BuyTicketResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BuyTicketResult) Unmarshal(in []byte) error {
	msg := new(ticket.BuyTicketResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BuyTicketResult) GetSuccess() *ticket.BuyTicketResponse {
	if !p.IsSetSuccess() {
		return BuyTicketResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BuyTicketResult) SetSuccess(x interface{}) {
	p.Success = x.(*ticket.BuyTicketResponse)
}

func (p *BuyTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BuyTicketResult) GetResult() interface{} {
	return p.Success
}

func returnTicketHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(ticket.ReturnTicketRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(ticket.TicketService).ReturnTicket(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReturnTicketArgs:
		success, err := handler.(ticket.TicketService).ReturnTicket(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReturnTicketResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReturnTicketArgs() interface{} {
	return &ReturnTicketArgs{}
}

func newReturnTicketResult() interface{} {
	return &ReturnTicketResult{}
}

type ReturnTicketArgs struct {
	Req *ticket.ReturnTicketRequest
}

func (p *ReturnTicketArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ticket.ReturnTicketRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReturnTicketArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReturnTicketArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReturnTicketArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReturnTicketArgs) Unmarshal(in []byte) error {
	msg := new(ticket.ReturnTicketRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReturnTicketArgs_Req_DEFAULT *ticket.ReturnTicketRequest

func (p *ReturnTicketArgs) GetReq() *ticket.ReturnTicketRequest {
	if !p.IsSetReq() {
		return ReturnTicketArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReturnTicketArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReturnTicketArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReturnTicketResult struct {
	Success *ticket.ReturnTicketResponse
}

var ReturnTicketResult_Success_DEFAULT *ticket.ReturnTicketResponse

func (p *ReturnTicketResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ticket.ReturnTicketResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReturnTicketResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReturnTicketResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReturnTicketResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReturnTicketResult) Unmarshal(in []byte) error {
	msg := new(ticket.ReturnTicketResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReturnTicketResult) GetSuccess() *ticket.ReturnTicketResponse {
	if !p.IsSetSuccess() {
		return ReturnTicketResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReturnTicketResult) SetSuccess(x interface{}) {
	p.Success = x.(*ticket.ReturnTicketResponse)
}

func (p *ReturnTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReturnTicketResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BatchAddTicket(ctx context.Context, Req *ticket.BatchAddTicketRequest) (r *ticket.BatchAddTicketResponse, err error) {
	var _args BatchAddTicketArgs
	_args.Req = Req
	var _result BatchAddTicketResult
	if err = p.c.Call(ctx, "BatchAddTicket", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTicket(ctx context.Context, Req *ticket.UpdateTicketRequest) (r *ticket.UpdateTicketResponse, err error) {
	var _args UpdateTicketArgs
	_args.Req = Req
	var _result UpdateTicketResult
	if err = p.c.Call(ctx, "UpdateTicket", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllTicket(ctx context.Context, Req *ticket.GetAllTicketRequest) (r *ticket.GetAllTicketResponse, err error) {
	var _args GetAllTicketArgs
	_args.Req = Req
	var _result GetAllTicketResult
	if err = p.c.Call(ctx, "GetAllTicket", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BuyTicket(ctx context.Context, Req *ticket.BuyTicketRequest) (r *ticket.BuyTicketResponse, err error) {
	var _args BuyTicketArgs
	_args.Req = Req
	var _result BuyTicketResult
	if err = p.c.Call(ctx, "BuyTicket", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReturnTicket(ctx context.Context, Req *ticket.ReturnTicketRequest) (r *ticket.ReturnTicketResponse, err error) {
	var _args ReturnTicketArgs
	_args.Req = Req
	var _result ReturnTicketResult
	if err = p.c.Call(ctx, "ReturnTicket", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
