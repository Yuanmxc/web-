// Code generated by Kitex v0.9.1. DO NOT EDIT.

package studioservice

import (
	studio "TTMS/kitex_gen/studio"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddStudio(ctx context.Context, Req *studio.AddStudioRequest, callOptions ...callopt.Option) (r *studio.AddStudioResponse, err error)
	GetAllStudio(ctx context.Context, Req *studio.GetAllStudioRequest, callOptions ...callopt.Option) (r *studio.GetAllStudioResponse, err error)
	UpdateStudio(ctx context.Context, Req *studio.UpdateStudioRequest, callOptions ...callopt.Option) (r *studio.UpdateStudioResponse, err error)
	DeleteStudio(ctx context.Context, Req *studio.DeleteStudioRequest, callOptions ...callopt.Option) (r *studio.DeleteStudioResponse, err error)
	AddSeat(ctx context.Context, Req *studio.AddSeatRequest, callOptions ...callopt.Option) (r *studio.AddSeatResponse, err error)
	GetAllSeat(ctx context.Context, Req *studio.GetAllSeatRequest, callOptions ...callopt.Option) (r *studio.GetAllSeatResponse, err error)
	UpdateSeat(ctx context.Context, Req *studio.UpdateSeatRequest, callOptions ...callopt.Option) (r *studio.UpdateSeatResponse, err error)
	DeleteSeat(ctx context.Context, Req *studio.DeleteSeatRequest, callOptions ...callopt.Option) (r *studio.DeleteSeatResponse, err error)
	GetStudio(ctx context.Context, Req *studio.GetStudioRequest, callOptions ...callopt.Option) (r *studio.GetStudioResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kStudioServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kStudioServiceClient struct {
	*kClient
}

func (p *kStudioServiceClient) AddStudio(ctx context.Context, Req *studio.AddStudioRequest, callOptions ...callopt.Option) (r *studio.AddStudioResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddStudio(ctx, Req)
}

func (p *kStudioServiceClient) GetAllStudio(ctx context.Context, Req *studio.GetAllStudioRequest, callOptions ...callopt.Option) (r *studio.GetAllStudioResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllStudio(ctx, Req)
}

func (p *kStudioServiceClient) UpdateStudio(ctx context.Context, Req *studio.UpdateStudioRequest, callOptions ...callopt.Option) (r *studio.UpdateStudioResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateStudio(ctx, Req)
}

func (p *kStudioServiceClient) DeleteStudio(ctx context.Context, Req *studio.DeleteStudioRequest, callOptions ...callopt.Option) (r *studio.DeleteStudioResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteStudio(ctx, Req)
}

func (p *kStudioServiceClient) AddSeat(ctx context.Context, Req *studio.AddSeatRequest, callOptions ...callopt.Option) (r *studio.AddSeatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddSeat(ctx, Req)
}

func (p *kStudioServiceClient) GetAllSeat(ctx context.Context, Req *studio.GetAllSeatRequest, callOptions ...callopt.Option) (r *studio.GetAllSeatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllSeat(ctx, Req)
}

func (p *kStudioServiceClient) UpdateSeat(ctx context.Context, Req *studio.UpdateSeatRequest, callOptions ...callopt.Option) (r *studio.UpdateSeatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateSeat(ctx, Req)
}

func (p *kStudioServiceClient) DeleteSeat(ctx context.Context, Req *studio.DeleteSeatRequest, callOptions ...callopt.Option) (r *studio.DeleteSeatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteSeat(ctx, Req)
}

func (p *kStudioServiceClient) GetStudio(ctx context.Context, Req *studio.GetStudioRequest, callOptions ...callopt.Option) (r *studio.GetStudioResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStudio(ctx, Req)
}
