// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package play

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseResp[number], err)
}

func (x *BaseResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMessage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Play) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Play[number], err)
}

func (x *Play) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Play) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Play) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Play) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Play) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Rating, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Play) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Duration, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Play) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.StartDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Play) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.EndDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Play) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddPlayRequest[number], err)
}

func (x *AddPlayRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Rating, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Duration, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.StartDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.EndDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddPlayRequest) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddPlayResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddPlayResponse[number], err)
}

func (x *AddPlayResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *UpdatePlayRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePlayRequest[number], err)
}

func (x *UpdatePlayRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Rating, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Duration, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.StartDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.EndDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePlayRequest) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdatePlayResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePlayResponse[number], err)
}

func (x *UpdatePlayResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DeletePlayRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePlayRequest[number], err)
}

func (x *DeletePlayRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeletePlayResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePlayResponse[number], err)
}

func (x *DeletePlayResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *PlayToScheduleRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PlayToScheduleRequest[number], err)
}

func (x *PlayToScheduleRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PlayToScheduleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PlayToScheduleResponse[number], err)
}

func (x *PlayToScheduleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *PlayToScheduleResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Play
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Play = &v
	return offset, nil
}

func (x *PlayToScheduleResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ScheduleList = append(x.ScheduleList, v)
			return offset, err
		})
	return offset, err
}

func (x *GetAllPlayRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllPlayRequest[number], err)
}

func (x *GetAllPlayRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetAllPlayRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetAllPlayResponseData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllPlayResponseData[number], err)
}

func (x *GetAllPlayResponseData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetAllPlayResponseData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Play
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *GetAllPlayResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllPlayResponse[number], err)
}

func (x *GetAllPlayResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetAllPlayResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v GetAllPlayResponseData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *Schedule) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Schedule[number], err)
}

func (x *Schedule) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Schedule) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PlayId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Schedule) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.StudioId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Schedule) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ShowTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddScheduleRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddScheduleRequest[number], err)
}

func (x *AddScheduleRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PlayId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddScheduleRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StudioId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddScheduleRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ShowTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddScheduleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddScheduleResponse[number], err)
}

func (x *AddScheduleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *UpdateScheduleRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateScheduleRequest[number], err)
}

func (x *UpdateScheduleRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateScheduleRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PlayId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateScheduleRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.StudioId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateScheduleRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ShowTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateScheduleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateScheduleResponse[number], err)
}

func (x *UpdateScheduleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DeleteScheduleRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteScheduleRequest[number], err)
}

func (x *DeleteScheduleRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteScheduleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteScheduleResponse[number], err)
}

func (x *DeleteScheduleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetScheduleRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetScheduleRequest[number], err)
}

func (x *GetScheduleRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetScheduleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetScheduleResponse[number], err)
}

func (x *GetScheduleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetScheduleResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Schedule
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Schedule = &v
	return offset, nil
}

func (x *GetAllScheduleRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllScheduleRequest[number], err)
}

func (x *GetAllScheduleRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetAllScheduleRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Result) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Result[number], err)
}

func (x *Result) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Result) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PlayName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Result) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Result) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Rating, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Result) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Duration, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Result) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ShowTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Result) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Result) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.StudioName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAllScheduleResponseData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllScheduleResponseData[number], err)
}

func (x *GetAllScheduleResponseData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetAllScheduleResponseData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Result
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *GetAllScheduleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllScheduleResponse[number], err)
}

func (x *GetAllScheduleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetAllScheduleResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v GetAllScheduleResponseData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *BaseResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *BaseResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMessage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMessage())
	return offset
}

func (x *Play) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Play) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Play) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Play) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetType())
	return offset
}

func (x *Play) fastWriteField4(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetArea())
	return offset
}

func (x *Play) fastWriteField5(buf []byte) (offset int) {
	if x.Rating == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 5, x.GetRating())
	return offset
}

func (x *Play) fastWriteField6(buf []byte) (offset int) {
	if x.Duration == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDuration())
	return offset
}

func (x *Play) fastWriteField7(buf []byte) (offset int) {
	if x.StartDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetStartDate())
	return offset
}

func (x *Play) fastWriteField8(buf []byte) (offset int) {
	if x.EndDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetEndDate())
	return offset
}

func (x *Play) fastWriteField9(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetPrice())
	return offset
}

func (x *AddPlayRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *AddPlayRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *AddPlayRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetType())
	return offset
}

func (x *AddPlayRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetArea())
	return offset
}

func (x *AddPlayRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Rating == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 4, x.GetRating())
	return offset
}

func (x *AddPlayRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Duration == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDuration())
	return offset
}

func (x *AddPlayRequest) fastWriteField6(buf []byte) (offset int) {
	if x.StartDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetStartDate())
	return offset
}

func (x *AddPlayRequest) fastWriteField7(buf []byte) (offset int) {
	if x.EndDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetEndDate())
	return offset
}

func (x *AddPlayRequest) fastWriteField8(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetPrice())
	return offset
}

func (x *AddPlayResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddPlayResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *UpdatePlayRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *UpdatePlayRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetType())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetArea())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Rating == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 5, x.GetRating())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField6(buf []byte) (offset int) {
	if x.Duration == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDuration())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField7(buf []byte) (offset int) {
	if x.StartDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetStartDate())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField8(buf []byte) (offset int) {
	if x.EndDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetEndDate())
	return offset
}

func (x *UpdatePlayRequest) fastWriteField9(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetPrice())
	return offset
}

func (x *UpdatePlayResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePlayResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *DeletePlayRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePlayRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeletePlayResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePlayResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *PlayToScheduleRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PlayToScheduleRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *PlayToScheduleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PlayToScheduleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *PlayToScheduleResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Play == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPlay())
	return offset
}

func (x *PlayToScheduleResponse) fastWriteField3(buf []byte) (offset int) {
	if len(x.ScheduleList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 3, len(x.GetScheduleList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetScheduleList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *GetAllPlayRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllPlayRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *GetAllPlayRequest) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *GetAllPlayResponseData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllPlayResponseData) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *GetAllPlayResponseData) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *GetAllPlayResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllPlayResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *GetAllPlayResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *Schedule) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Schedule) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Schedule) fastWriteField2(buf []byte) (offset int) {
	if x.PlayId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPlayId())
	return offset
}

func (x *Schedule) fastWriteField3(buf []byte) (offset int) {
	if x.StudioId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStudioId())
	return offset
}

func (x *Schedule) fastWriteField4(buf []byte) (offset int) {
	if x.ShowTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetShowTime())
	return offset
}

func (x *AddScheduleRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AddScheduleRequest) fastWriteField1(buf []byte) (offset int) {
	if x.PlayId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPlayId())
	return offset
}

func (x *AddScheduleRequest) fastWriteField2(buf []byte) (offset int) {
	if x.StudioId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetStudioId())
	return offset
}

func (x *AddScheduleRequest) fastWriteField3(buf []byte) (offset int) {
	if x.ShowTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetShowTime())
	return offset
}

func (x *AddScheduleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddScheduleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *UpdateScheduleRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UpdateScheduleRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateScheduleRequest) fastWriteField2(buf []byte) (offset int) {
	if x.PlayId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPlayId())
	return offset
}

func (x *UpdateScheduleRequest) fastWriteField3(buf []byte) (offset int) {
	if x.StudioId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStudioId())
	return offset
}

func (x *UpdateScheduleRequest) fastWriteField4(buf []byte) (offset int) {
	if x.ShowTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetShowTime())
	return offset
}

func (x *UpdateScheduleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateScheduleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *DeleteScheduleRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteScheduleRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteScheduleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteScheduleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *GetScheduleRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetScheduleRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetScheduleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetScheduleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *GetScheduleResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Schedule == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetSchedule())
	return offset
}

func (x *GetAllScheduleRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllScheduleRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *GetAllScheduleRequest) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *Result) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Result) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Result) fastWriteField2(buf []byte) (offset int) {
	if x.PlayName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPlayName())
	return offset
}

func (x *Result) fastWriteField3(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetArea())
	return offset
}

func (x *Result) fastWriteField4(buf []byte) (offset int) {
	if x.Rating == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 4, x.GetRating())
	return offset
}

func (x *Result) fastWriteField5(buf []byte) (offset int) {
	if x.Duration == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDuration())
	return offset
}

func (x *Result) fastWriteField6(buf []byte) (offset int) {
	if x.ShowTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetShowTime())
	return offset
}

func (x *Result) fastWriteField7(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetPrice())
	return offset
}

func (x *Result) fastWriteField8(buf []byte) (offset int) {
	if x.StudioName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetStudioName())
	return offset
}

func (x *GetAllScheduleResponseData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllScheduleResponseData) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *GetAllScheduleResponseData) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *GetAllScheduleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllScheduleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *GetAllScheduleResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *BaseResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *BaseResp) sizeField2() (n int) {
	if x.StatusMessage == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMessage())
	return n
}

func (x *Play) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Play) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Play) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Play) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetType())
	return n
}

func (x *Play) sizeField4() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetArea())
	return n
}

func (x *Play) sizeField5() (n int) {
	if x.Rating == 0 {
		return n
	}
	n += fastpb.SizeUint32(5, x.GetRating())
	return n
}

func (x *Play) sizeField6() (n int) {
	if x.Duration == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDuration())
	return n
}

func (x *Play) sizeField7() (n int) {
	if x.StartDate == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetStartDate())
	return n
}

func (x *Play) sizeField8() (n int) {
	if x.EndDate == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetEndDate())
	return n
}

func (x *Play) sizeField9() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetPrice())
	return n
}

func (x *AddPlayRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *AddPlayRequest) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *AddPlayRequest) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetType())
	return n
}

func (x *AddPlayRequest) sizeField3() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetArea())
	return n
}

func (x *AddPlayRequest) sizeField4() (n int) {
	if x.Rating == 0 {
		return n
	}
	n += fastpb.SizeUint32(4, x.GetRating())
	return n
}

func (x *AddPlayRequest) sizeField5() (n int) {
	if x.Duration == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDuration())
	return n
}

func (x *AddPlayRequest) sizeField6() (n int) {
	if x.StartDate == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetStartDate())
	return n
}

func (x *AddPlayRequest) sizeField7() (n int) {
	if x.EndDate == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetEndDate())
	return n
}

func (x *AddPlayRequest) sizeField8() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetPrice())
	return n
}

func (x *AddPlayResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddPlayResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *UpdatePlayRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *UpdatePlayRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdatePlayRequest) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdatePlayRequest) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetType())
	return n
}

func (x *UpdatePlayRequest) sizeField4() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetArea())
	return n
}

func (x *UpdatePlayRequest) sizeField5() (n int) {
	if x.Rating == 0 {
		return n
	}
	n += fastpb.SizeUint32(5, x.GetRating())
	return n
}

func (x *UpdatePlayRequest) sizeField6() (n int) {
	if x.Duration == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDuration())
	return n
}

func (x *UpdatePlayRequest) sizeField7() (n int) {
	if x.StartDate == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetStartDate())
	return n
}

func (x *UpdatePlayRequest) sizeField8() (n int) {
	if x.EndDate == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetEndDate())
	return n
}

func (x *UpdatePlayRequest) sizeField9() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetPrice())
	return n
}

func (x *UpdatePlayResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePlayResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *DeletePlayRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePlayRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *DeletePlayResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePlayResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *PlayToScheduleRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PlayToScheduleRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *PlayToScheduleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PlayToScheduleResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *PlayToScheduleResponse) sizeField2() (n int) {
	if x.Play == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPlay())
	return n
}

func (x *PlayToScheduleResponse) sizeField3() (n int) {
	if len(x.ScheduleList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(3, len(x.GetScheduleList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetScheduleList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *GetAllPlayRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllPlayRequest) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCurrent())
	return n
}

func (x *GetAllPlayRequest) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetPageSize())
	return n
}

func (x *GetAllPlayResponseData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllPlayResponseData) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *GetAllPlayResponseData) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *GetAllPlayResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllPlayResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *GetAllPlayResponse) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

func (x *Schedule) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Schedule) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Schedule) sizeField2() (n int) {
	if x.PlayId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPlayId())
	return n
}

func (x *Schedule) sizeField3() (n int) {
	if x.StudioId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStudioId())
	return n
}

func (x *Schedule) sizeField4() (n int) {
	if x.ShowTime == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetShowTime())
	return n
}

func (x *AddScheduleRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AddScheduleRequest) sizeField1() (n int) {
	if x.PlayId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPlayId())
	return n
}

func (x *AddScheduleRequest) sizeField2() (n int) {
	if x.StudioId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetStudioId())
	return n
}

func (x *AddScheduleRequest) sizeField3() (n int) {
	if x.ShowTime == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetShowTime())
	return n
}

func (x *AddScheduleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddScheduleResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *UpdateScheduleRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UpdateScheduleRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdateScheduleRequest) sizeField2() (n int) {
	if x.PlayId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPlayId())
	return n
}

func (x *UpdateScheduleRequest) sizeField3() (n int) {
	if x.StudioId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStudioId())
	return n
}

func (x *UpdateScheduleRequest) sizeField4() (n int) {
	if x.ShowTime == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetShowTime())
	return n
}

func (x *UpdateScheduleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateScheduleResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *DeleteScheduleRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteScheduleRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *DeleteScheduleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteScheduleResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *GetScheduleRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetScheduleRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *GetScheduleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetScheduleResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *GetScheduleResponse) sizeField2() (n int) {
	if x.Schedule == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetSchedule())
	return n
}

func (x *GetAllScheduleRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllScheduleRequest) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCurrent())
	return n
}

func (x *GetAllScheduleRequest) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetPageSize())
	return n
}

func (x *Result) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Result) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Result) sizeField2() (n int) {
	if x.PlayName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPlayName())
	return n
}

func (x *Result) sizeField3() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetArea())
	return n
}

func (x *Result) sizeField4() (n int) {
	if x.Rating == 0 {
		return n
	}
	n += fastpb.SizeUint32(4, x.GetRating())
	return n
}

func (x *Result) sizeField5() (n int) {
	if x.Duration == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDuration())
	return n
}

func (x *Result) sizeField6() (n int) {
	if x.ShowTime == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetShowTime())
	return n
}

func (x *Result) sizeField7() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetPrice())
	return n
}

func (x *Result) sizeField8() (n int) {
	if x.StudioName == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetStudioName())
	return n
}

func (x *GetAllScheduleResponseData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllScheduleResponseData) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *GetAllScheduleResponseData) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *GetAllScheduleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllScheduleResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *GetAllScheduleResponse) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

var fieldIDToName_BaseResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMessage",
}

var fieldIDToName_Play = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Type",
	4: "Area",
	5: "Rating",
	6: "Duration",
	7: "StartDate",
	8: "EndDate",
	9: "Price",
}

var fieldIDToName_AddPlayRequest = map[int32]string{
	1: "Name",
	2: "Type",
	3: "Area",
	4: "Rating",
	5: "Duration",
	6: "StartDate",
	7: "EndDate",
	8: "Price",
}

var fieldIDToName_AddPlayResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_UpdatePlayRequest = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Type",
	4: "Area",
	5: "Rating",
	6: "Duration",
	7: "StartDate",
	8: "EndDate",
	9: "Price",
}

var fieldIDToName_UpdatePlayResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DeletePlayRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeletePlayResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_PlayToScheduleRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_PlayToScheduleResponse = map[int32]string{
	1: "BaseResp",
	2: "Play",
	3: "ScheduleList",
}

var fieldIDToName_GetAllPlayRequest = map[int32]string{
	1: "Current",
	2: "PageSize",
}

var fieldIDToName_GetAllPlayResponseData = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_GetAllPlayResponse = map[int32]string{
	1: "BaseResp",
	2: "Data",
}

var fieldIDToName_Schedule = map[int32]string{
	1: "Id",
	2: "PlayId",
	3: "StudioId",
	4: "ShowTime",
}

var fieldIDToName_AddScheduleRequest = map[int32]string{
	1: "PlayId",
	2: "StudioId",
	3: "ShowTime",
}

var fieldIDToName_AddScheduleResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_UpdateScheduleRequest = map[int32]string{
	1: "Id",
	2: "PlayId",
	3: "StudioId",
	4: "ShowTime",
}

var fieldIDToName_UpdateScheduleResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DeleteScheduleRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteScheduleResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_GetScheduleRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetScheduleResponse = map[int32]string{
	1: "BaseResp",
	2: "Schedule",
}

var fieldIDToName_GetAllScheduleRequest = map[int32]string{
	1: "Current",
	2: "PageSize",
}

var fieldIDToName_Result = map[int32]string{
	1: "Id",
	2: "PlayName",
	3: "Area",
	4: "Rating",
	5: "Duration",
	6: "ShowTime",
	7: "Price",
	8: "StudioName",
}

var fieldIDToName_GetAllScheduleResponseData = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_GetAllScheduleResponse = map[int32]string{
	1: "BaseResp",
	2: "Data",
}
